import { DynamicScheme, MaterialDynamicColors } from "@material/material-color-utilities";
import type { Color, SerializedScheme } from "./utils";

export const pairs = [
  ["primary", "onPrimary"],
  ["primaryContainer", "onPrimaryContainer"],
  ["secondary", "onSecondary"],
  ["secondaryContainer", "onSecondaryContainer"],
  ["tertiary", "onTertiary"],
  ["tertiaryContainer", "onTertiaryContainer"],
  ["background", "onBackground"],
  ["surface", "onSurface"],
  ["inverseSurface", "inverseOnSurface"],
  ["surfaceVariant", "onSurfaceVariant"],
  ["error", "onError"],
  ["errorContainer", "onErrorContainer"],
];

export const colors: Color[] = [
  "primary",
  "onPrimary",
  "primaryContainer",
  "onPrimaryContainer",
  "inversePrimary",
  "secondary",
  "onSecondary",
  "secondaryContainer",
  "onSecondaryContainer",
  "tertiary",
  "onTertiary",
  "tertiaryContainer",
  "onTertiaryContainer",
  "error",
  "onError",
  "errorContainer",
  "onErrorContainer",
  "background",
  "onBackground",
  "surface",
  "onSurface",
  "surfaceVariant",
  "onSurfaceVariant",
  "inverseSurface",
  "inverseOnSurface",
  "outline",
  "outlineVariant",
  "shadow",
  "scrim",
  "surfaceDim",
  "surfaceBright",
  "surfaceContainerLowest",
  "surfaceContainerLow",
  "surfaceContainer",
  "surfaceContainerHigh",
  "surfaceContainerHighest",
  "surfaceTint",
];

/**
 * @description Serializes the {@link DynamicScheme} so that it can be used by {@link StyleFromScheme} and {@link genCSS}.
 * @param scheme The theme generated by material-color-utils.
 * */

export const serializeScheme = (scheme: DynamicScheme) => {
  const out: Record<string, number> = {};
  for (const color of colors) {
    out[color] = MaterialDynamicColors[color].getArgb(scheme);
  }
  return out as SerializedScheme;
};